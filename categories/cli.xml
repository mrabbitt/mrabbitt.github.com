<?xml version="1.0" encoding="utf-8"?>
<rss xmlns:atom="http://www.w3.org/2005/Atom" version="2.0"><channel><title>â‘ ne is 3 (cli)</title><link>http://oneis3.com/</link><description>One is 3</description><atom:link href="http://oneis3.com/categories/cli.xml" type="application/rss+xml" rel="self"></atom:link><lastBuildDate>Fri, 20 Sep 2013 22:29:43 GMT</lastBuildDate><generator>nikola</generator><docs>http://blogs.law.harvard.edu/tech/rss</docs><item><title>Python Script to download Splunk Documentation PDFs</title><link>http://oneis3.com//posts/python-script-to-download-splunk-documentation-pdfs.html</link><description>&lt;p&gt;
&lt;/p&gt;&lt;div class="gist"&gt;
&lt;script src="https://gist.github.com/4121269.js"&gt;&lt;/script&gt;&lt;noscript&gt;
&lt;pre&gt;#!/usr/bin/env python
'''
Script to download all PDF files for a particular version of Splunk documentation.

Requirements:
    requests:  http://docs.python-requests.org
    beautifulsoup4:  http://www.crummy.com/software/BeautifulSoup/

(pip install -U requests beautifulsoup4)

Author:  Michael Rabbitt (https://github.com/mrabbitt)
'''
from __future__ import unicode_literals, print_function
import os.path
import shutil
import re
import sys
import tempfile
import requests
from bs4 import BeautifulSoup

manual_link_regex = re.compile(r'^/Documentation/Splunk/([\d.]+)/([^/]+)/(.+)$')
filename_regex = re.compile(r'filename="([^"]+)"')

def getDownloadFileName(response, default_name):
    '''Determines file name from a response object based on its headers
    Rerverts to `default_name` if no name is suggested by the response headers.'''
    if response.headers.has_key('content-disposition'):
        match = filename_regex.match(response.headers['content-disposition'])
        if match:
            return match.group(1)
    return default_name

def main(download_directory, target_version):
    response = requests.get('http://docs.splunk.com/Documentation/Splunk/{0}'.format(target_version))
    page = BeautifulSoup(response.text)
    manual_links = [div.find('a') for div in page.find_all('div', class_='manualmodule')]

    for manual_link in manual_links:
        match = manual_link_regex.match(manual_link.attrs['href'])
        doc_description = manual_link.text.strip()
        (version, section, docname) =  match.groups()

        pdf_url = 'http://docs.splunk.com/index.php?title=Documentation:Splunk:{0}:{1}:{2}&amp;amp;action=pdfbook'.format(section, docname, version)
        print('Downloading "{0}" from &amp;lt;{1}&amp;gt;...'.format(doc_description, pdf_url))
        pdf_response = requests.get(pdf_url)

        file_name = getDownloadFileName(pdf_response, 'Splunk-{0}-{1}.pdf'.format(version, section))

        with tempfile.NamedTemporaryFile(suffix=file_name, delete=False) as temp_file:
            temp_file.write(pdf_response.content)

            target_path = os.path.join(download_directory, file_name)
            print('Moving temporary file to {0}'.format(target_path))
            shutil.move(temp_file.name, target_path)

    print('Complete')

if __name__ == '__main__':
    if len(sys.argv) == 3:
        download_directory = sys.argv[1]
        target_version = sys.argv[2] if len(sys.argv) == 3 else 'latest'

        if os.path.isdir(download_directory):
            main(download_directory, target_version)
        else:
            print('No such directory: {0}'.format(download_directory), file=sys.stderr)

    else:
        print('''Usage: {0} PATH_TO_DOWNLOAD_DIR VERSION'''.format(os.path.basename(__file__)), file=sys.stderr)&lt;/pre&gt;
&lt;/noscript&gt;
&lt;/div&gt;
</description><category>Python</category><category>cli</category><category>Splunk</category><category>migrated_from_tumblr</category><guid>http://oneis3.com//posts/python-script-to-download-splunk-documentation-pdfs.html</guid><pubDate>Tue, 20 Nov 2012 16:33:00 GMT</pubDate></item><item><title>Open in SourceTree from IntelliJ IDEA</title><link>http://oneis3.com//posts/open-in-sourcetree-from-intellij-idea.html</link><description>&lt;p&gt;I'm quite fond of &lt;a href="http://www.sourcetreeapp.com/"&gt;SourceTree&lt;/a&gt; for managing Git repositories (it does Mercurial as well).  SourceTree comes with an &lt;code&gt;stree&lt;/code&gt; command to open repositories from the command line.  I wanted to set up an &lt;a href="http://www.jetbrains.com/idea/webhelp/external-tools.html"&gt;external tool in IntelliJ IDEA&lt;/a&gt; to the repo containing the current source file, &lt;code&gt;stree&lt;/code&gt; only works if you call it without any arguments with a current working directory of the root level of a repo, or if you pass the path to the root level of a repo as an argument.  This is fine if you have only a single Git source root in your IntelliJ project:  You can just use call &lt;code&gt;stree&lt;/code&gt; directly with the &lt;code&gt;$ProjectFileDir$&lt;/code&gt; macro as a parameter.  But if you have multiple modules in your project with different Git source roots, it gets more difficult.  I tried using the &lt;code&gt;$ModuleFileDir$&lt;/code&gt; macro, but this seems to the directory where the &lt;code&gt;.iml&lt;/code&gt; file for the module is stored, which is not the source root of the module.&lt;/p&gt;
&lt;p&gt;So, I ended up writing a small wrapper for &lt;code&gt;stree&lt;/code&gt; which can take the path to any file or directory within a Git or Mercurial repo as an argument and invokes &lt;code&gt;stree&lt;/code&gt; with the path to the root of the repo:&lt;/p&gt;
&lt;p&gt;
&lt;/p&gt;&lt;div class="gist"&gt;
&lt;script src="https://gist.github.com/3051104.js"&gt;&lt;/script&gt;&lt;noscript&gt;
&lt;pre&gt;#!/bin/bash -e

getRepoRoot()
{
    local target=$1
    if [ -d "${target}" ] ; then
        cd "${target}"
    elif [ -f "${target}" ] ; then
        cd "$(dirname ${target})"
    fi

    echo $(git rev-parse --show-toplevel 2&amp;gt;/dev/null || hg root 2&amp;gt;/dev/null)
}

repo_root_path=$(getRepoRoot "${1:-${PWD}}")
stree "${repo_root_path}"
&lt;/pre&gt;
&lt;/noscript&gt;
&lt;/div&gt;
</description><category>IntelliJ IDEA</category><category>SourceTree</category><category>bash</category><category>git</category><category>hg</category><category>cli</category><category>migrated_from_tumblr</category><guid>http://oneis3.com//posts/open-in-sourcetree-from-intellij-idea.html</guid><pubDate>Thu, 05 Jul 2012 12:11:00 GMT</pubDate></item></channel></rss>