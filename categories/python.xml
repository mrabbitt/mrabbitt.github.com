<?xml version="1.0" encoding="utf-8"?>
<?xml-stylesheet type="text/xsl" href="../assets/xml/rss.xsl" media="all"?><rss xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:atom="http://www.w3.org/2005/Atom" version="2.0"><channel><title>①ne is 3 (Posts about Python)</title><link>http://www.oneis3.com/</link><description></description><atom:link type="application/rss+xml" rel="self" href="http://www.oneis3.com/categories/python.xml"></atom:link><language>en</language><copyright>Contents © 2017 &lt;a href="mailto:mpr@oneis3.com"&gt;Michael Rabbitt&lt;/a&gt; 
&lt;a rel="license" href="http://creativecommons.org/licenses/by-nc-sa/2.5/ar/"&gt;
&lt;img alt="Creative Commons License BY-NC-SA"
style="border-width:0; margin-bottom:12px;"
src="https://licensebuttons.net/l/by-nc-sa/2.5/ar/88x31.png"&gt;&lt;/a&gt;</copyright><lastBuildDate>Sun, 10 Sep 2017 00:56:23 GMT</lastBuildDate><generator>Nikola (getnikola.com)</generator><docs>http://blogs.law.harvard.edu/tech/rss</docs><item><title>Fun with Sikuli and Baldur's Gate</title><link>http://www.oneis3.com/posts/fun-with-sikuli-and-baldurs-gate.html</link><dc:creator>Michael Rabbitt</dc:creator><description>&lt;div&gt;&lt;p&gt;A few months ago I was playing &lt;a href="http://www.baldursgate.com"&gt;Baldur's Gate: Enhanced Edition (BGEE)&lt;/a&gt;, and going through the character creation process.  The game chooses the character's initial statistics by simulated random dice rolls.  You can re-distribute points between different attributes as you desire, but you can only increase the total number of points by re-rolling.  You can re-roll as many times as you want, hoping to get a higher total number of points.  You can also "store" and "recall" a single roll.&lt;/p&gt;
&lt;p&gt;The lazy programmer in me saw this as an a task begging for automation.&lt;/p&gt;
&lt;p&gt;I spent the next several hours developing a &lt;a href="http://sikuli.org"&gt;Sikuli&lt;/a&gt; script which automates the process of re-rolling until a desired total roll is reached.  I've finally gotten around to cleaning up the code and releasing it on github as &lt;a href="https://github.com/mrabbitt/BGEE_Sikuli_auto_roller"&gt;BGEE_Sikuli_auto_roller&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Here's a video demo (painfully edited in iMovie) of &lt;code&gt;BGEE_Sikuli_auto_roller&lt;/code&gt; in action:&lt;/p&gt;
&lt;iframe width="420" height="315" src="//www.youtube.com/embed/K-0nRvz3z4I" frameborder="0" allowfullscreen&gt;&lt;/iframe&gt;

&lt;p&gt;Happy dungeon/code hacking!&lt;/p&gt;&lt;/div&gt;</description><category>Games</category><category>GitHub</category><category>Python</category><category>Sikuli</category><guid>http://www.oneis3.com/posts/fun-with-sikuli-and-baldurs-gate.html</guid><pubDate>Mon, 16 Sep 2013 00:55:24 GMT</pubDate></item><item><title>Python Markdown Extension for Inline Gist</title><link>http://www.oneis3.com/posts/python-markdown-extension-for-inline-gist.html</link><dc:creator>Michael Rabbitt</dc:creator><description>&lt;div&gt;&lt;p&gt;As discussed in &lt;a href="https://groups.google.com/d/topic/nikola-discuss/ScaJGcTGBBY/discussion"&gt;this thread on the Nikola forum&lt;/a&gt;, I'd wanted a way add a custom inline "gist" directive to Nikola which I could use in my markdown posts to include the full contents of the gist in a &lt;code&gt;&amp;lt;noscript&amp;gt;&lt;/code&gt; tag.  This makes gist contents available in the site RSS feed and when viewing the site with Javascript disabled.  Here's a gist (of course) with the Python Markdown extension that makes this possible:&lt;/p&gt;
&lt;p&gt;
&lt;/p&gt;&lt;div class="gist"&gt;
&lt;script src="https://gist.github.com/5080027.js"&gt;&lt;/script&gt;
&lt;noscript&gt;
&lt;pre&gt;# -*- coding: utf-8 -*-
#
# Copyright (c) 2013 Michael Rabbitt.
#
# Permission is hereby granted, free of charge, to any person obtaining a
# copy of this software and associated documentation files (the
# "Software"), to deal in the Software without restriction, including
# without limitation the rights to use, copy, modify, merge, publish,
# distribute, sublicense, and/or sell copies of the Software, and to
# permit persons to whom the Software is furnished to do so, subject to
# the following conditions:
#
# The above copyright notice and this permission notice shall be included
# in all copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
# OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
# MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.
# IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY
# CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,
# TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE
# SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
#
# Warning: URL formats of "raw" gists are undocummented and subject to change.
# See also:  http://developer.github.com/v3/gists/
#
# Inspired by "[Python] reStructuredText GitHub Gist directive"
# (https://gist.github.com/brianhsu/1407759), public domain by Brian Hsu
'''
Extension to Python Markdown for Embedded Gists (gist.github.com)

Basic Example:

    &amp;gt;&amp;gt;&amp;gt; import markdown
    &amp;gt;&amp;gt;&amp;gt; text = """
    ... Text of the gist:
    ... [:gist: 4747847]
    ... """
    &amp;gt;&amp;gt;&amp;gt; html = markdown.markdown(text, ['gist'])
    &amp;gt;&amp;gt;&amp;gt; print(html)
    &amp;lt;p&amp;gt;Text of the gist:
    &amp;lt;div class="gist"&amp;gt;
    &amp;lt;script src="https://gist.github.com/4747847.js"&amp;gt;&amp;lt;/script&amp;gt;
    &amp;lt;noscript&amp;gt;
    &amp;lt;pre&amp;gt;import this&amp;lt;/pre&amp;gt;
    &amp;lt;/noscript&amp;gt;
    &amp;lt;/div&amp;gt;
    &amp;lt;/p&amp;gt;

Example with filename:

    &amp;gt;&amp;gt;&amp;gt; import markdown
    &amp;gt;&amp;gt;&amp;gt; text = """
    ... Text of the gist:
    ... [:gist: 4747847 zen.py]
    ... """
    &amp;gt;&amp;gt;&amp;gt; html = markdown.markdown(text, ['gist'])
    &amp;gt;&amp;gt;&amp;gt; print(html)
    &amp;lt;p&amp;gt;Text of the gist:
    &amp;lt;div class="gist"&amp;gt;
    &amp;lt;script src="https://gist.github.com/4747847.js?file=zen.py"&amp;gt;&amp;lt;/script&amp;gt;
    &amp;lt;noscript&amp;gt;
    &amp;lt;pre&amp;gt;import this&amp;lt;/pre&amp;gt;
    &amp;lt;/noscript&amp;gt;
    &amp;lt;/div&amp;gt;
    &amp;lt;/p&amp;gt;

Basic Example with hexidecimal id:

    &amp;gt;&amp;gt;&amp;gt; import markdown
    &amp;gt;&amp;gt;&amp;gt; text = """
    ... Text of the gist:
    ... [:gist: c4a43d6fdce612284ac0]
    ... """
    &amp;gt;&amp;gt;&amp;gt; html = markdown.markdown(text, ['gist'])
    &amp;gt;&amp;gt;&amp;gt; print(html)
    &amp;lt;p&amp;gt;Text of the gist:
    &amp;lt;div class="gist"&amp;gt;
    &amp;lt;script src="https://gist.github.com/c4a43d6fdce612284ac0.js"&amp;gt;&amp;lt;/script&amp;gt;
    &amp;lt;noscript&amp;gt;
    &amp;lt;pre&amp;gt;Moo&amp;lt;/pre&amp;gt;
    &amp;lt;/noscript&amp;gt;
    &amp;lt;/div&amp;gt;
    &amp;lt;/p&amp;gt;

Example with hexidecimal id filename:

    &amp;gt;&amp;gt;&amp;gt; import markdown
    &amp;gt;&amp;gt;&amp;gt; text = """
    ... Text of the gist:
    ... [:gist: c4a43d6fdce612284ac0 cow.txt]
    ... """
    &amp;gt;&amp;gt;&amp;gt; html = markdown.markdown(text, ['gist'])
    &amp;gt;&amp;gt;&amp;gt; print(html)
    &amp;lt;p&amp;gt;Text of the gist:
    &amp;lt;div class="gist"&amp;gt;
    &amp;lt;script src="https://gist.github.com/c4a43d6fdce612284ac0.js?file=cow.txt"&amp;gt;&amp;lt;/script&amp;gt;
    &amp;lt;noscript&amp;gt;
    &amp;lt;pre&amp;gt;Moo&amp;lt;/pre&amp;gt;
    &amp;lt;/noscript&amp;gt;
    &amp;lt;/div&amp;gt;
    &amp;lt;/p&amp;gt;

Example using reStructuredText syntax:

    &amp;gt;&amp;gt;&amp;gt; import markdown
    &amp;gt;&amp;gt;&amp;gt; text = """
    ... Text of the gist:
    ... .. gist:: 4747847 zen.py
    ... """
    &amp;gt;&amp;gt;&amp;gt; html = markdown.markdown(text, ['gist'])
    &amp;gt;&amp;gt;&amp;gt; print(html)
    &amp;lt;p&amp;gt;Text of the gist:
    &amp;lt;div class="gist"&amp;gt;
    &amp;lt;script src="https://gist.github.com/4747847.js?file=zen.py"&amp;gt;&amp;lt;/script&amp;gt;
    &amp;lt;noscript&amp;gt;
    &amp;lt;pre&amp;gt;import this&amp;lt;/pre&amp;gt;
    &amp;lt;/noscript&amp;gt;
    &amp;lt;/div&amp;gt;
    &amp;lt;/p&amp;gt;

Example using hexidecimal ID and reStructuredText syntax:

    &amp;gt;&amp;gt;&amp;gt; import markdown
    &amp;gt;&amp;gt;&amp;gt; text = """
    ... Text of the gist:
    ... .. gist:: c4a43d6fdce612284ac0 cow.txt
    ... """
    &amp;gt;&amp;gt;&amp;gt; html = markdown.markdown(text, ['gist'])
    &amp;gt;&amp;gt;&amp;gt; print(html)
    &amp;lt;p&amp;gt;Text of the gist:
    &amp;lt;div class="gist"&amp;gt;
    &amp;lt;script src="https://gist.github.com/c4a43d6fdce612284ac0.js?file=cow.txt"&amp;gt;&amp;lt;/script&amp;gt;
    &amp;lt;noscript&amp;gt;
    &amp;lt;pre&amp;gt;Moo&amp;lt;/pre&amp;gt;
    &amp;lt;/noscript&amp;gt;
    &amp;lt;/div&amp;gt;
    &amp;lt;/p&amp;gt;

Error Case: non-existent Gist ID:

    &amp;gt;&amp;gt;&amp;gt; import markdown
    &amp;gt;&amp;gt;&amp;gt; text = """
    ... Text of the gist:
    ... [:gist: 0]
    ... """
    &amp;gt;&amp;gt;&amp;gt; html = markdown.markdown(text, ['gist'])
    &amp;gt;&amp;gt;&amp;gt; print(html)
    &amp;lt;p&amp;gt;Text of the gist:
    &amp;lt;div class="gist"&amp;gt;
    &amp;lt;script src="https://gist.github.com/0.js"&amp;gt;&amp;lt;/script&amp;gt;
    &amp;lt;noscript&amp;gt;&amp;lt;!-- WARNING: Received a 404 response from Gist URL: \
    https://gist.githubusercontent.com/raw/0 --&amp;gt;&amp;lt;/noscript&amp;gt;
    &amp;lt;/div&amp;gt;
    &amp;lt;/p&amp;gt;

Error Case:  non-existent file:

    &amp;gt;&amp;gt;&amp;gt; import markdown
    &amp;gt;&amp;gt;&amp;gt; text = """
    ... Text of the gist:
    ... [:gist: 4747847 doesntexist.py]
    ... """
    &amp;gt;&amp;gt;&amp;gt; html = markdown.markdown(text, ['gist'])
    &amp;gt;&amp;gt;&amp;gt; print(html)
    &amp;lt;p&amp;gt;Text of the gist:
    &amp;lt;div class="gist"&amp;gt;
    &amp;lt;script src="https://gist.github.com/4747847.js?file=doesntexist.py"&amp;gt;&amp;lt;/script&amp;gt;
    &amp;lt;noscript&amp;gt;&amp;lt;!-- WARNING: Received a 404 response from Gist URL: \
    https://gist.githubusercontent.com/raw/4747847/doesntexist.py --&amp;gt;&amp;lt;/noscript&amp;gt;
    &amp;lt;/div&amp;gt;
    &amp;lt;/p&amp;gt;

'''
from __future__ import unicode_literals, print_function
import warnings
from markdown.extensions import Extension
from markdown.inlinepatterns import Pattern
from markdown.util import AtomicString
from markdown.util import etree

try:
    import requests
except ImportError:
    requests = None  # NOQA

GIST_JS_URL = "https://gist.github.com/{0}.js"
GIST_FILE_JS_URL = "https://gist.github.com/{0}.js?file={1}"
GIST_RAW_URL = "https://gist.githubusercontent.com/raw/{0}"
GIST_FILE_RAW_URL = "https://gist.githubusercontent.com/raw/{0}/{1}"

GIST_MD_RE = r'\[:gist:\s*(?P&amp;lt;gist_id&amp;gt;\S+)(?:\s*(?P&amp;lt;filename&amp;gt;.+?))?\s*\]'
GIST_RST_RE = r'(?m)^\.\.\s*gist::\s*(?P&amp;lt;gist_id&amp;gt;[^\]\s]+)(?:\s*(?P&amp;lt;filename&amp;gt;.+))\s*$'


class GistFetchException(Exception):
    '''Raised when attempt to fetch content of a Gist from github.com fails.'''
    def __init__(self, url, status_code):
        Exception.__init__(self)
        self.message = 'Received a {0} response from Gist URL: {1}'.format(
            status_code, url)


class GistPattern(Pattern):
    """ InlinePattern for footnote markers in a document's body text. """

    def __init__(self, pattern, configs):
        Pattern.__init__(self, pattern)

    def get_raw_gist_with_filename(self, gist_id, filename):
        url = GIST_FILE_RAW_URL.format(gist_id, filename)
        resp = requests.get(url)

        if not resp.ok:
            raise GistFetchException(url, resp.status_code)

        return resp.text

    def get_raw_gist(self, gist_id):
        url = GIST_RAW_URL.format(gist_id)
        resp = requests.get(url)

        if not resp.ok:
            raise GistFetchException(url, resp.status_code)

        return resp.text

    def handleMatch(self, m):
        gist_id = m.group('gist_id')
        gist_file = m.group('filename')

        gist_elem = etree.Element('div')
        gist_elem.set('class', 'gist')
        script_elem = etree.SubElement(gist_elem, 'script')

        if requests:
            noscript_elem = etree.SubElement(gist_elem, 'noscript')

            try:
                if gist_file:
                    script_elem.set('src', GIST_FILE_JS_URL.format(
                        gist_id, gist_file))
                    raw_gist = (self.get_raw_gist_with_filename(
                        gist_id, gist_file))

                else:
                    script_elem.set('src', GIST_JS_URL.format(
                        gist_id))
                    raw_gist = (self.get_raw_gist(gist_id))

                # Insert source as &amp;lt;pre/&amp;gt; within &amp;lt;noscript&amp;gt;
                pre_elem = etree.SubElement(noscript_elem, 'pre')
                pre_elem.text = AtomicString(raw_gist)

            except GistFetchException as e:
                warnings.warn(e.message)
                warning_comment = etree.Comment(' WARNING: {0} '.format(e.message))
                noscript_elem.append(warning_comment)

        else:
            warnings.warn('"requests" package not installed.  '
                          'Please install to add inline gist source.')

        return gist_elem


class GistExtension(Extension):
    def __init__(self, configs={}):
        # set extension defaults
        self.config = {}

        # Override defaults with user settings
        for key, value in configs:
            self.setConfig(key, value)

    def extendMarkdown(self, md, md_globals):
        gist_md_pattern = GistPattern(GIST_MD_RE, self.getConfigs())
        gist_md_pattern.md = md
        md.inlinePatterns.add('gist', gist_md_pattern, "&amp;lt;not_strong")

        gist_rst_pattern = GistPattern(GIST_RST_RE, self.getConfigs())
        gist_rst_pattern.md = md
        md.inlinePatterns.add('gist-rst', gist_rst_pattern, "&amp;gt;gist")

        md.registerExtension(self)


def makeExtension(configs=None):
    return GistExtension(configs)

if __name__ == '__main__':
    import doctest

    # Silence user warnings thrown by tests:
    with warnings.catch_warnings(record=True):
        doctest.testmod(optionflags=(doctest.NORMALIZE_WHITESPACE +
                                     doctest.REPORT_NDIFF))
&lt;/pre&gt;
&lt;/noscript&gt;
&lt;/div&gt;

&lt;p&gt;I'll be sending a push request shortly to get this integrated into Nikola.  Thanks to Roberto Alsina for already &lt;code&gt;gist&lt;/code&gt; support to reStructuredText posts in Nikola.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Update: &lt;a href="https://github.com/ralsina/nikola/pull/380"&gt;Pull request accepted&lt;/a&gt;!&lt;/em&gt;&lt;/p&gt;&lt;/div&gt;</description><category>GitHub</category><category>Markdown</category><category>Nikola</category><category>Python</category><guid>http://www.oneis3.com/posts/python-markdown-extension-for-inline-gist.html</guid><pubDate>Mon, 04 Mar 2013 00:23:36 GMT</pubDate></item><item><title>Python Script to download Splunk Documentation PDFs</title><link>http://www.oneis3.com/posts/python-script-to-download-splunk-documentation-pdfs.html</link><dc:creator>Michael Rabbitt</dc:creator><description>&lt;div&gt;&lt;p&gt;
&lt;/p&gt;&lt;div class="gist"&gt;
&lt;script src="https://gist.github.com/4121269.js"&gt;&lt;/script&gt;
&lt;noscript&gt;
&lt;pre&gt;#!/usr/bin/env python
'''
Script to download all PDF files for a particular version of Splunk documentation.

Requirements:
    requests:  http://docs.python-requests.org
    beautifulsoup4:  http://www.crummy.com/software/BeautifulSoup/

(pip install -U requests beautifulsoup4)

Author:  Michael Rabbitt (https://github.com/mrabbitt)
'''
from __future__ import unicode_literals, print_function
import os.path
import shutil
import re
import sys
import tempfile
import requests
from bs4 import BeautifulSoup

manual_link_regex = re.compile(r'^/Documentation/Splunk/([\d.]+)/([^/]+)/(.+)$')
filename_regex = re.compile(r'filename="([^"]+)"')

def getDownloadFileName(response, default_name):
    '''Determines file name from a response object based on its headers
    Rerverts to `default_name` if no name is suggested by the response headers.'''
    if response.headers.has_key('content-disposition'):
        match = filename_regex.match(response.headers['content-disposition'])
        if match:
            return match.group(1)
    return default_name

def main(download_directory, target_version):
    response = requests.get('http://docs.splunk.com/Documentation/Splunk/{0}'.format(target_version))
    page = BeautifulSoup(response.text)
    manual_links = [div.find('a') for div in page.find_all('div', class_='manualmodule')]

    for manual_link in manual_links:
        match = manual_link_regex.match(manual_link.attrs['href'])
        doc_description = manual_link.text.strip()
        (version, section, docname) =  match.groups()

        pdf_url = 'http://docs.splunk.com/index.php?title=Documentation:Splunk:{0}:{1}:{2}&amp;amp;action=pdfbook'.format(section, docname, version)
        print('Downloading "{0}" from &amp;lt;{1}&amp;gt;...'.format(doc_description, pdf_url))
        pdf_response = requests.get(pdf_url)

        file_name = getDownloadFileName(pdf_response, 'Splunk-{0}-{1}.pdf'.format(version, section))

        with tempfile.NamedTemporaryFile(suffix=file_name, delete=False) as temp_file:
            temp_file.write(pdf_response.content)

            target_path = os.path.join(download_directory, file_name)
            print('Moving temporary file to {0}'.format(target_path))
            shutil.move(temp_file.name, target_path)

    print('Complete')

if __name__ == '__main__':
    if len(sys.argv) == 3:
        download_directory = sys.argv[1]
        target_version = sys.argv[2] if len(sys.argv) == 3 else 'latest'

        if os.path.isdir(download_directory):
            main(download_directory, target_version)
        else:
            print('No such directory: {0}'.format(download_directory), file=sys.stderr)

    else:
        print('''Usage: {0} PATH_TO_DOWNLOAD_DIR VERSION'''.format(os.path.basename(__file__)), file=sys.stderr)&lt;/pre&gt;
&lt;/noscript&gt;
&lt;/div&gt;
&lt;/div&gt;</description><category>cli</category><category>migrated_from_tumblr</category><category>Python</category><category>Splunk</category><guid>http://www.oneis3.com/posts/python-script-to-download-splunk-documentation-pdfs.html</guid><pubDate>Tue, 20 Nov 2012 16:33:00 GMT</pubDate></item></channel></rss>